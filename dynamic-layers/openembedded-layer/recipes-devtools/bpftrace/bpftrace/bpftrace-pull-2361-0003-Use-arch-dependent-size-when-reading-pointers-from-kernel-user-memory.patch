From 9d706c2f5125d9a143ab22789f80e64b696efa90 Mon Sep 17 00:00:00 2001
From: Tomislav Novak <tnovak@fb.com>
Date: Thu, 6 Oct 2022 16:57:43 -0700
Subject: Use arch-dependent size when reading pointers from kernel/user memory

The size of the internal pointer type is always 8 bytes; this causes issues on
32-bit architectures, since bpf_probe_read calls and ctx-relative loads of
pointers use the wrong size[1].

Rather than changing the Type::pointer size to depend on the arch (which can
cause bad BPF codegen on 32-bit systems, for example emitting shift instructions
to truncate PTR_TO_STACK registers[2]), new variants of CreateProbeRead and
CreateLoad that take into account pointer width are introduced. These methods
are then used in probereadDatastructElem() and readDatastructElemFromStack().

[1] Note that field offsets within structs that contain pointers are correct
    because libclang assumes host triple when parsing struct definitions.
[2] https://github.com/iovisor/bpftrace/pull/2361
---
 src/ast/irbuilderbpf.cpp        | 56 +++++++++++++++++++++++++++++++++++++++++
 src/ast/irbuilderbpf.h          | 22 ++++++++++++++++
 src/ast/passes/codegen_llvm.cpp | 35 ++++++++++++++++----------
 3 files changed, 100 insertions(+), 13 deletions(-)

diff --git a/src/ast/irbuilderbpf.cpp b/src/ast/irbuilderbpf.cpp
index 2fb94c92..d141d959 100644
--- a/src/ast/irbuilderbpf.cpp
+++ b/src/ast/irbuilderbpf.cpp
@@ -1355,6 +1355,62 @@ StoreInst *IRBuilderBPF::createAlignedStore(Value *val,
 #endif
 }
 
+void IRBuilderBPF::CreateProbeRead(Value *ctx,
+                                   Value *dst,
+                                   const SizedType &type,
+                                   Value *src,
+                                   const location &loc,
+                                   std::optional<AddrSpace> addrSpace)
+{
+  AddrSpace as = addrSpace ? addrSpace.value() : type.GetAS();
+
+  if (!type.IsPtrTy())
+    return CreateProbeRead(ctx, dst, type.GetSize(), src, as, loc);
+
+  // Pointers are internally always represented as 64-bit integers, matching the
+  // BPF register size (BPF is a 64-bit ISA). This helps to avoid BPF codegen
+  // issues such as truncating PTR_TO_STACK registers using shift operations,
+  // which is disallowed (see https://github.com/iovisor/bpftrace/pull/2361).
+  // However, when reading pointers from kernel or user memory, we need to use
+  // the appropriate size for the target system.
+  const size_t ptr_size = getPointerStorageTy(as)->getIntegerBitWidth() / 8;
+
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
+  // TODO: support 32-bit big-endian systems
+  assert(ptr_size == type.GetSize());
+#endif
+
+  if (ptr_size != type.GetSize())
+    CREATE_MEMSET(dst, getInt8(0), type.GetSize(), 1);
+
+  CreateProbeRead(ctx, dst, ptr_size, src, as, loc);
+}
+
+llvm::Value *IRBuilderBPF::CreateDatastructElemLoad(
+    const SizedType &type,
+    llvm::Value *ptr,
+    bool isVolatile,
+    std::optional<AddrSpace> addrSpace)
+{
+  AddrSpace as = addrSpace ? addrSpace.value() : type.GetAS();
+  llvm::Type *ptr_storage_ty = getPointerStorageTy(as);
+
+  if (!type.IsPtrTy() || ptr_storage_ty == getInt64Ty())
+    return CreateLoad(GetType(type), ptr, isVolatile);
+
+  assert(GetType(type) == getInt64Ty());
+
+  // Pointer size for the given address space doesn't match the BPF-side
+  // representation. Use ptr_storage_ty as the load type and cast the result
+  // back to int64.
+  llvm::Value *expr = CreateLoad(
+      ptr_storage_ty,
+      CreatePointerCast(ptr, ptr_storage_ty->getPointerTo()),
+      isVolatile);
+
+  return CreateIntCast(expr, getInt64Ty(), false);
+}
+
 llvm::Type *IRBuilderBPF::getPointerStorageTy(AddrSpace as)
 {
   switch (as)
diff --git a/src/ast/irbuilderbpf.h b/src/ast/irbuilderbpf.h
index 3f06e9d3..725b67bb 100644
--- a/src/ast/irbuilderbpf.h
+++ b/src/ast/irbuilderbpf.h
@@ -5,6 +5,8 @@
 #include <llvm/Config/llvm-config.h>
 #include <llvm/IR/IRBuilder.h>
 
+#include <optional>
+
 #include "ast/ast.h"
 #include "bpftrace.h"
 #include "types.h"
@@ -89,6 +91,26 @@ public:
                        Value *src,
                        AddrSpace as,
                        const location &loc);
+  // Emits a bpf_probe_read call in which the size is derived from the SizedType
+  // argument. Has special handling for certain types such as pointers where the
+  // size depends on the host system as well as the probe type.
+  // If provided, the optional AddrSpace argument is used instead of the type's
+  // address space (which may not always be set).
+  void CreateProbeRead(Value *ctx,
+                       Value *dest,
+                       const SizedType &type,
+                       Value *src,
+                       const location &loc,
+                       std::optional<AddrSpace> addrSpace = std::nullopt);
+  // Emits the load instruction the type of which is derived from the provided
+  // SizedType. Used to access elements from structures that ctx points to, or
+  // those that have already been pulled onto the BPF stack. Correctly handles
+  // pointer size differences (see CreateProbeRead).
+  llvm::Value *CreateDatastructElemLoad(
+      const SizedType &type,
+      llvm::Value *ptr,
+      bool isVolatile = false,
+      std::optional<AddrSpace> addrSpace = std::nullopt);
   CallInst *CreateProbeReadStr(Value *ctx,
                                AllocaInst *dst,
                                llvm::Value *size,
diff --git a/src/ast/passes/codegen_llvm.cpp b/src/ast/passes/codegen_llvm.cpp
index 8ed02d04..d141b7de 100644
--- a/src/ast/passes/codegen_llvm.cpp
+++ b/src/ast/passes/codegen_llvm.cpp
@@ -271,10 +271,19 @@ void CodegenLLVM::visit(Builtin &builtin)
     int arg_num = atoi(builtin.ident.substr(4).c_str());
     Value *sp = b_.CreateRegisterRead(ctx_, sp_offset, "reg_sp");
     AllocaInst *dst = b_.CreateAllocaBPF(builtin.type, builtin.ident);
-    Value *src = b_.CreateAdd(sp,
-                              b_.getInt64((arg_num + arch::arg_stack_offset()) *
-                                          sizeof(uintptr_t)));
-    b_.CreateProbeRead(ctx_, dst, 8, src, builtin.type.GetAS(), builtin.loc);
+
+    // Pointer width is used when calculating the SP offset and the number of
+    // bytes to read from stack for each argument. We pass a pointer SizedType
+    // to CreateProbeRead to make sure it uses the correct read size while
+    // keeping builtin.type an int64.
+    size_t arg_width =
+        b_.getPointerStorageTy(builtin.type.GetAS())->getIntegerBitWidth() / 8;
+    SizedType arg_type = CreatePointer(CreateInt8(), builtin.type.GetAS());
+    assert(builtin.type.GetSize() == arg_type.GetSize());
+
+    Value *src = b_.CreateAdd(
+        sp, b_.getInt64((arg_num + arch::arg_stack_offset()) * arg_width));
+    b_.CreateProbeRead(ctx_, dst, arg_type, src, builtin.loc);
     expr_ = b_.CreateLoad(b_.GetType(builtin.type), dst);
     b_.CreateLifetimeEnd(dst);
   }
@@ -1629,10 +1638,8 @@ void CodegenLLVM::unop_ptr(Unop &unop)
       if (unop.type.IsIntegerTy() || unop.type.IsPtrTy())
       {
         auto *et = type.GetPointeeTy();
-        // Pointer always 64 bits wide
-        int size = unop.type.IsIntegerTy() ? et->GetIntBitWidth() / 8 : 8;
         AllocaInst *dst = b_.CreateAllocaBPF(*et, "deref");
-        b_.CreateProbeRead(ctx_, dst, size, expr_, type.GetAS(), unop.loc);
+        b_.CreateProbeRead(ctx_, dst, *et, expr_, unop.loc, type.GetAS());
         expr_ = b_.CreateLoad(b_.GetType(*et), dst);
         b_.CreateLifetimeEnd(dst);
       }
@@ -3396,7 +3403,8 @@ void CodegenLLVM::readDatastructElemFromStack(Value *src_data,
   if (elem_type.IsIntegerTy() || elem_type.IsPtrTy())
   {
     // Load the correct type from src
-    expr_ = b_.CreateLoad(b_.GetType(elem_type), src, true);
+    expr_ = b_.CreateDatastructElemLoad(
+        elem_type, src, true, data_type.GetAS());
   }
   else
   {
@@ -3450,9 +3458,11 @@ void CodegenLLVM::probereadDatastructElem(Value *src_data,
     // Read data onto stack
     if (data_type.IsCtxAccess())
     {
-      expr_ = b_.CreateLoad(dst_type,
-                            b_.CreateIntToPtr(src, dst_type->getPointerTo()),
-                            true);
+      expr_ = b_.CreateDatastructElemLoad(
+          elem_type,
+          b_.CreateIntToPtr(src, dst_type->getPointerTo()),
+          true,
+          data_type.GetAS());
 
       // check context access for iter probes (required by kernel)
       if (probetype(current_attach_point_->provider) == ProbeType::iter)
@@ -3479,8 +3489,7 @@ void CodegenLLVM::probereadDatastructElem(Value *src_data,
     else
     {
       AllocaInst *dst = b_.CreateAllocaBPF(elem_type, temp_name);
-      b_.CreateProbeRead(
-          ctx_, dst, elem_type.GetSize(), src, data_type.GetAS(), loc);
+      b_.CreateProbeRead(ctx_, dst, elem_type, src, loc, data_type.GetAS());
       expr_ = b_.CreateLoad(b_.GetType(elem_type), dst);
       b_.CreateLifetimeEnd(dst);
     }
-- 
cgit v1.2.3-18-g5258

